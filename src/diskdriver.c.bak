
#include "diskdriver.h"

#define BASE_1 0x01f0
#define BASE_5 0xf0f0
#define B1_DATA 0x00
#define B1_ERROR 0x01
#define B1_SECTOR_COUNT 0x02
#define B1_LBA_LO 0x03
#define B1_LBA_MID 0x04
#define B1_LBA_HI 0x05
#define B1_DEVICE 0x06
#define B1_COMMAND 0x07
#define B1_STATUS 0x07
#define B5_COMMAND 0x00
#define B5_STATUS 0x02
#define B5_PRD 0x04

int32_t diskdriver( void ){
    c_printf( "Starting diskdriver\n" );
    // Send 0xA0 to the drive select IO port (0x1f6)
    // Set sectorcount lbalo/mid/hi to 0 (0x1f2-0x1f5)
    // Send identify (0xEC) to command io port (0x1f7)
    // Read status port (again?) (0x1f7) 0: Drive DNE
    // Poll status port until bit 7 clears (BSY, & 0x80)
    // Poll until bit 3 (DRQ, & 0x08) sets or until bit 0 (ERR, & 0x01) sets
    // Data ready to read from data port (0x1f0).
    // Read/store 256 16-bit values
    unsigned int status;
    uint16_t data16[256];


    char serialnum[21];
    __outb(BASE_1+B1_DEVICE, 0xa0);
     sleep(1);
     status = __inb(BASE_1+B1_STATUS);
    __outb(BASE_1+B1_SECTOR_COUNT, 0x00);
    __outb(BASE_1+B1_LBA_LO, 0x00);
    __outb(BASE_1+B1_LBA_MID, 0x00);
    __outb(BASE_1+B1_LBA_HI, 0x00);
    __outb(BASE_1+B1_COMMAND, 0xec);
    status = __inb(BASE_1+B1_STATUS);
    if (status == 0){
        c_printf("Drive does not exist???\n");
        exit(EXIT_FAILURE);
    }
    status = __inb(BASE_1+B1_STATUS);
    while (status & 0x80){
        //c_printf("Busy\n");
        status = __inb(BASE_1+B1_STATUS);
    }
    c_printf("Done with busy wait Status: %02x\n",status);

    //while ((status & 0x08) || (status & 0x01)){
        //c_printf("Not ready || Error\n");
        //status = __inb(BASE_1+7);
    //}
    c_printf("Ready to read\n");
    for (int i=0; i<256; i++){
        //c_printf("Reading\n");
        data16[i] = __inw(BASE_1+B1_DATA);
    }
    c_printf("Data is read\n");

    // Copy serial num
    c_printf("Serial number: %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x\n",data16[10],data16[11],data16[12],data16[13],data16[14],data16[15],data16[16],data16[17],data16[18],data16[19]);
    c_printf("Serial number: %s", (char *)(data16+10));

    for (int i=0; i<256; i+=12){
        //c_printf("Printing???\n");
        //c_printf("i:%3d %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x\n",i,data16[i],data16[i+1],data16[i+2],data16[i+3],data16[i+4],data16[i+5],data16[i+6],data16[i+7],data16[i+8],data16[i+9],data16[i+10],data16[i+11]);
    }
    c_printf("Done printing\n");


    c_printf("Trying to read with DMA");

    uint8_t data8[512];
    prd prd;
    //uint64_t prd;
    //prd = (uint64_t)data8;
    //prd |= 512 << 32;
    //prd |= 1 << 63;
    prd.base = (uint32_t)data8;
    prd.count=512;
    prd.pad=0xff;
    prd.eot=0xee;

    uint16_t prd_array[4];
    prd_array[0] = ((uint32_t)data8)&0xffff;
    prd_array[1] = ((uint32_t)data8)>>16;
    prd_array[2] = 512;
    prd_array[3] = 0x8000;

    c_printf("PRD size: %d\n",sizeof(prd));
    c_printf("&PRD: %016x\n",prd_array);
    //c_printf("&PRD: %016x\n",&prd);
    c_printf("PRD: ");
    for (int i=0; i<4; i++) c_printf("%x ",prd_array[i]);
    c_printf("\n");

    //c_printf("PRD: %x\n",prd);
    c_printf("data8: %08x\n",data8);
    //c_printf("data8: %08x\n",data8);
    __outb(BASE_5+B5_PRD, (uint32_t)prd_array);
    __outb(BASE_5+B5_COMMAND, 0x01);
    __outb(BASE_5+B5_STATUS, __inb(BASE_5+B5_STATUS)|0x03);
    __outb(BASE_1+B1_SECTOR_COUNT, 0x01);
    __outb(BASE_1+B1_LBA_LO, 0x00);
    __outb(BASE_1+B1_LBA_MID, 0x00);
    __outb(BASE_1+B1_LBA_HI, 0x00);
    __outb(BASE_1+B1_DEVICE, 0x40);
    __outb(BASE_1+B1_COMMAND, 0xc8);
    __outb(BASE_5+B5_COMMAND, __inb(BASE_5+B5_COMMAND)|0x01);


    c_printf("Waiting for interrupt");
    __delay(200); // wait for complete


    __outb(BASE_5+B5_COMMAND, __inb(BASE_5+B5_COMMAND)&0xfe);
    status = __inb(BASE_5+B5_STATUS);
    c_printf("Controller status %02x\n",status);

    status = __inb(BASE_1+B1_STATUS);
    c_printf("Drive status %02x\n",status);

    status = __inb(BASE_1+B1_ERROR);
    c_printf("Drive error %02x\n",status);

    c_printf("Data: \n");
    for (int i=256; i<512; i+=16){
        c_printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d ",data8[i+0],data8[i+1],data8[i+2],data8[i+3],data8[i+4],data8[i+5],data8[i+6],data8[i+7],data8[i+8],data8[i+9],data8[i+10],data8[i+11],data8[i+12],data8[i+13],data8[i+14],data8[i+15]);
        i+=16;
        c_printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n",data8[i+0],data8[i+1],data8[i+2],data8[i+3],data8[i+4],data8[i+5],data8[i+6],data8[i+7],data8[i+8],data8[i+9],data8[i+10],data8[i+11],data8[i+12],data8[i+13],data8[i+14],data8[i+15]);
    }















  //int base = 0xf0f0;
  //c_printf( "Base address = %x",base);
  //for (int i=0; i<16; i+=2){
  //    int b1 = __inb(base+i);
  //    int b2 = __inb(base+i+1);
  //    c_printf("Byte %4x: %2x  ",base+i,b1);
  //    c_printf("Byte %4x: %2x\n",base+i+1,b2);
  //}

  //prd *prdp = (prd *)__inl(base+0x04);
  //c_printf("PRD pointer: %x\n",prdp);
  //c_printf("PRD address: %x  ",prdp->address);
  //c_printf("PRD count: %x  ", prdp->count);
  //c_printf("PRD eot: %x\n", prdp->end);

  //prdp = (prd *)__inw(base+0x0c);
  //c_printf("PRD pointer: %x\n",prdp);
  //c_printf("PRD address: %x  ",prdp->address);
  //c_printf("PRD count: %x  ", prdp->count);
  //c_printf("PRD eot: %x\n", prdp->end);



    return 0;
}

